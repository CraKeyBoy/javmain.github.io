<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Javmain&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.51itzone.cn/"/>
  <updated>2018-08-20T02:11:16.648Z</updated>
  <id>https://blog.51itzone.cn/</id>
  
  <author>
    <name>javmain</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python 虚拟环境管理 pipenv 使用</title>
    <link href="https://blog.51itzone.cn/2018/05/08/python-pipenv-how-use/"/>
    <id>https://blog.51itzone.cn/2018/05/08/python-pipenv-how-use/</id>
    <published>2018-05-08T02:43:22.000Z</published>
    <updated>2018-08-20T02:11:16.648Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/pypa/pipenv" target="_blank" rel="noopener">pipenv</a> 是 2017 年 1 月由 <a href="https://www.kennethreitz.org/" target="_blank" rel="noopener">Kennethreitz</a> 大神创作，目前已经有 286 个版本发布，可见在 GitHub 上是非常活跃的项目。简单来说 pipenv 的是管理 python 环境和 python 依赖包的工具。使用时 pipenv 会自动创建虚拟环境，并且新增了 Pipfile 文件来维护包依赖， 新增 Pipfile.lock 已在确定环境和依赖后锁定项目，以便最终版本发布。 pipenv 还是 Python.org 正式推荐的 python 包管理工具。<br>引用官方说明：</p><blockquote><p>Pipenv — the officially recommended Python packaging tool from Python.org, free (as in freedom).<br><a id="more"></a></p></blockquote><h1 id="pipevn-可以解决那些问题"><a href="#pipevn-可以解决那些问题" class="headerlink" title="pipevn 可以解决那些问题"></a>pipevn 可以解决那些问题</h1><ol><li><p>使用 pipevn 就相当于同时使用了 pip 和 virtualenv ，即做到包管理又可以管理虚拟环境。</p></li><li><p>使用 pipevn 解决 requirement.txt 面临的<a href="https://www.kennethreitz.org/essays/a-better-pip-workflow" target="_blank" rel="noopener">问题</a></p></li><li><p>pipenv 使用 Pipfile 代替 requirement.txt 文件来记录项目依赖包。</p></li><li><p>新增了 Pipfile.lock 文件来锁定 python 软件的包名及版本，以及其依赖关系的列表。</p></li><li><p>它参考了其他语言的包管理工具（bundler, composer, npm, cargo, yarn, etc.），旨在将最好的包管理工具带入 python 世界。</p></li></ol><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h2><p>使用 Homebrew 安装:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install pipenv</span><br></pre></td></tr></table></figure><h2 id="Ubuntu17-10"><a href="#Ubuntu17-10" class="headerlink" title="Ubuntu17.10"></a>Ubuntu17.10</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install software-properties-common python-software-properties</span><br><span class="line">sudo add-apt-repository ppa:pypa/ppa</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install pipenv</span><br></pre></td></tr></table></figure><h2 id="使用-pip-安装"><a href="#使用-pip-安装" class="headerlink" title="使用 pip 安装"></a>使用 pip 安装</h2><p>作者推荐在 python3 下边安装，会提高与 virtualenv 的兼容性。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pipenv</span><br></pre></td></tr></table></figure><p>为防止和系统python库产生影响，可使用此种方案安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --user pipenv</span><br></pre></td></tr></table></figure><p>pip 默认安装包路径为 /usr/local/lib/python2.7/site-packages 。此模式下，pip 安装包保存路径为用户库路径,可使用命令 python3 -m site –user-site 具体查看。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> python3 -m site --user-site</span><br><span class="line">/Users/apple/Library/Python/3.6/lib/python/site-packages</span><br></pre></td></tr></table></figure><p>如果在安装后你的 shell 中 pipenv 不可用，你需要把用户库的二进制目录 /Users/apple/Library/Python/3.6/bin 添加到你的 PATH 中。</p><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><h2 id="pipenv-虚拟环境使用"><a href="#pipenv-虚拟环境使用" class="headerlink" title="pipenv 虚拟环境使用"></a>pipenv 虚拟环境使用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 创建实例项目</span><br><span class="line"><span class="meta">$</span> mkdir PipenvDemo</span><br><span class="line"><span class="meta">$</span> cd PipenvDemo</span><br><span class="line"><span class="meta">$</span> touch helloworld.py</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> vim helloworld.py</span><br><span class="line">print("hello world")</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> python3 helloworld.py</span><br><span class="line">hello world</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 使用 python3 创建 pipenv 虚拟环境</span><br><span class="line"><span class="meta">$</span> pipenv install --three</span><br><span class="line">Creating a Pipfile for this project…  # 自动创建 Pipfile</span><br><span class="line">Pipfile.lock not found, creating…     # 自动创建 Pipfile.lock</span><br><span class="line">Locking [dev-packages] dependencies…</span><br><span class="line">Locking [packages] dependencies…</span><br><span class="line">Updated Pipfile.lock (ca72e7)!</span><br><span class="line">Installing dependencies from Pipfile.lock (ca72e7)…</span><br><span class="line">  🐍   ▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉ 0/0 — 00:00:00</span><br><span class="line">To activate this project's virtualenv, run the following:</span><br><span class="line"><span class="meta">  $</span> pipenv shell</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 查看虚拟环境位置</span><br><span class="line"><span class="meta">$</span> pipenv --venv</span><br><span class="line">/Users/apple/.local/share/virtualenvs/PipenvDemo-jMTXT_BG</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 查看 python 解析器位置</span><br><span class="line"><span class="meta">$</span> pipenv --py</span><br><span class="line">/Users/apple/.local/share/virtualenvs/PipenvDemo-jMTXT_BG/bin/python</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 运行</span><br><span class="line"><span class="meta">$</span> pipenv run python helloworld.py</span><br><span class="line">hello world</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 使用 pipenv 创建的虚拟环境运行</span><br><span class="line"><span class="meta">$</span> pipenv shell</span><br><span class="line">Spawning environment shell (/bin/zsh). Use 'exit' to leave.</span><br><span class="line">. /Users/apple/.local/share/virtualenvs/PipenvDemo-jMTXT_BG/bin/activate</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 查询当前环境 python 的位置</span><br><span class="line"><span class="meta">$</span> which python</span><br><span class="line">/Users/apple/.local/share/virtualenvs/PipenvDemo-jMTXT_BG/bin/python</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 查看当前环境 python 的版本</span><br><span class="line"><span class="meta">$</span> python -V</span><br><span class="line">Python 3.6.5</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 运行 python 程序</span><br><span class="line">python helloworld.py</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 安装依赖包</span><br><span class="line"><span class="meta">$</span> pipenv install requests</span><br><span class="line">Installing requests…</span><br><span class="line">Collecting requests...</span><br><span class="line">Successfully installed certifi-2018.4.16 chardet-3.0.4 idna-2.6 requests-2.18.4 urllib3-1.22</span><br><span class="line"></span><br><span class="line">Adding requests to Pipfile's [packages]…</span><br><span class="line">Pipfile.lock (ca72e7) out of date, updating to (b14837)…</span><br><span class="line">Locking [dev-packages] dependencies…</span><br><span class="line">Locking [packages] dependencies…</span><br><span class="line">Updated Pipfile.lock (b14837)!...</span><br><span class="line"></span><br><span class="line"><span class="meta"> #</span> 查看安装包依赖</span><br><span class="line"><span class="meta"> $</span> pipenv graph</span><br><span class="line">requests==2.18.4</span><br><span class="line">  - certifi [required: &gt;=2017.4.17, installed: 2018.4.16]</span><br><span class="line">  - chardet [required: &gt;=3.0.2,&lt;3.1.0, installed: 3.0.4]</span><br><span class="line">  - idna [required: &gt;=2.5,&lt;2.7, installed: 2.6]</span><br><span class="line">  - urllib3 [required: &lt;1.23,&gt;=1.21.1, installed: 1.22]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 依赖包只安装在开发环境</span><br><span class="line"><span class="meta">$</span> pipenv install pytest --dev</span><br><span class="line">Installing pytest...</span><br><span class="line">...</span><br><span class="line">Adding pytest to Pipfile's [dev-packages]...</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 查看 Pipfile 文件,发现 pytest 放到了 dev-packages 下</span><br><span class="line"><span class="meta">$</span> cat Pipfile</span><br><span class="line">[[source]]</span><br><span class="line">url = "https://pypi.org/simple"</span><br><span class="line">verify_ssl = true</span><br><span class="line">name = "pypi"</span><br><span class="line"></span><br><span class="line">[packages]</span><br><span class="line">requests = "*"</span><br><span class="line"></span><br><span class="line">[dev-packages]</span><br><span class="line">pytest = "*"</span><br><span class="line"></span><br><span class="line">[requires]</span><br><span class="line">python_version = "3.6"</span><br></pre></td></tr></table></figure><p>通过上面的示例，已经可以掌握大部分使用方法，更多命令详细内容读者可参考：<a href="https://docs.pipenv.org/basics/" target="_blank" rel="noopener">basics</a></p><h1 id="高级使用"><a href="#高级使用" class="headerlink" title="高级使用"></a>高级使用</h1><h2 id="命令行自动完成"><a href="#命令行自动完成" class="headerlink" title="命令行自动完成"></a>命令行自动完成</h2><p>如果你使用 bash 或者 zsh， 你可以在 ~/.bash_profile (~/.zshrc) 中设置如下变量，使用命令时按 tab 键会自动补全命令，非常方便</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval "$(pipenv --completion)"</span><br></pre></td></tr></table></figure><h2 id="使用-requirements-txt-来安装包依赖"><a href="#使用-requirements-txt-来安装包依赖" class="headerlink" title="使用 requirements.txt 来安装包依赖"></a>使用 requirements.txt 来安装包依赖</h2><p>通过 requirements.txt 安装，重用 requirements.txt 来构建新环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv install -r requirements.txt</span><br></pre></td></tr></table></figure><h2 id="自动安装-python"><a href="#自动安装-python" class="headerlink" title="自动安装 python"></a>自动安装 python</h2><p>如果你之前使用的是 pyenv 来管理 python 的版本，当使用 pipenv install 的时候 pipenv 会自动检测 python 是否存在，并询问你是否要安装该版本的 python</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cat Pipfile</span><br><span class="line">[[source]]</span><br><span class="line">url = "https://pypi.python.org/simple"</span><br><span class="line">verify_ssl = true</span><br><span class="line"></span><br><span class="line">[dev-packages]</span><br><span class="line"></span><br><span class="line">[packages]</span><br><span class="line">requests = "*"</span><br><span class="line"></span><br><span class="line">[requires]</span><br><span class="line">python_version = "3.6"</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> pipenv install</span><br><span class="line">Warning: Python 3.6 was not found on your system…</span><br><span class="line">Would you like us to install latest CPython 3.6 with pyenv? [Y/n]: y</span><br><span class="line">Installing CPython 3.6.2 with pyenv (this may take a few minutes)…</span><br><span class="line">...</span><br><span class="line">Making Python installation global…</span><br><span class="line">Creating a virtualenv for this project…</span><br><span class="line">Using /Users/apple/.pyenv/shims/python3 to create virtualenv…</span><br><span class="line">...</span><br><span class="line">No package provided, installing all dependencies.</span><br><span class="line">...</span><br><span class="line">Installing dependencies from Pipfile.lock…</span><br><span class="line">🐍 ▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉  5/5 — 00:00:03</span><br><span class="line">To activate this project's virtualenv, run the following:</span><br><span class="line"><span class="meta"> $</span> pipenv shell</span><br></pre></td></tr></table></figure><h2 id="修改默认-python-版本"><a href="#修改默认-python-版本" class="headerlink" title="修改默认 python 版本"></a>修改默认 python 版本</h2><p>Pipenv 默认使用 python3 来初始化项目，你可以通过 使用 –three 或者 –two 标识来改变初始化环境的 python 版本。也可以指定 PIPENV_DEFAULT_PYTHON_VERSION 值来指定 python 版本。</p><h2 id="自动加载-env-文件"><a href="#自动加载-env-文件" class="headerlink" title="自动加载 .env 文件"></a>自动加载 .env 文件</h2><p>如果在你的项目中包含 .env 文件，使用 $ pipenv shell 和 $ pipenv run 将会自动加载该文件。<br>如果你的 .env 文件没有在当前目录下，或者不叫 .env ,你可以使用如果命令指定文件位置或名称</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PIPENV_DOTENV_LOCATION=/path/to/.env pipenv shell</span><br></pre></td></tr></table></figure><p>阻止 pipenv 自动加载 .env 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PIPENV_DONT_LOAD_ENV=1 pipenv shell</span><br></pre></td></tr></table></figure><p>更多高级命令及使用详细内容可参考：<a href="https://docs.pipenv.org/advanced/" target="_blank" rel="noopener">advanced</a></p><h1 id="结合-vs-code-使用"><a href="#结合-vs-code-使用" class="headerlink" title="结合 vs code 使用"></a>结合 vs code 使用</h1><p>vs code 已经支持 pipenv 的使用，官方说明：</p><blockquote><p>A pipenv environment for the workplace folder. If one is found then no other interpreters are searched for or listed as pipenv expects to manage all aspects of the environment.</p></blockquote><p>大意是：项目如果使用 pipenv 环境，一旦发现使用了 pipenv ，则只列出此项目的 interpreter ，不会在搜索其他的 python 解析器，因为 pipenv 可以管理环境的各个方面。</p><p>使用 vs code 作为开发工具，打开已经生成 Pipfile 文件的项目，在选择 python interperter (⇧⌘P) 时，可能会遇到以下错误提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Workspace contains pipfile but attempt to run pipenv --venv failed with Traceback (most recent call last):</span><br><span class="line">File /usr/local/Cellar/pipenv/11.10.3/libexec/bin/pipenv, line 11, in &lt;module&gt; load_entry_point(pipenv==11.10.3, console_scripts, pipenv)() File /usr/local/Cellar/pipenv/11.10.3/libexec/lib/python3.6/site-packages/pipenv/vendor/click/core.py, line 722, in __call__ return self.main(*args, **kwargs) File /usr/local/Cellar/pipenv/11.10.3/libexec/lib/python3.6/site-packages/pipenv/vendor/click/core.py, line 676, in main _verify_python3_env() File /usr/local/Cellar/pipenv/11.10.3/libexec/lib/python3.6/site-packages/pipenv/vendor/click/_unicodefun.py, line 118, in _verify_python3_env for mitigation steps. + extra) RuntimeError: Click will abort further execution because Python 3 was configured to use ASCII as encoding for the environment. Consult http://click.pocoo.org/python3/for mitigation steps. This system lists a couple of UTF-8 supporting locales that you can pick from. The following suitable locales where discovered: af_ZA.UTF-8, am_ET.UTF-8, be_BY.UTF-8, bg_BG.UTF-8, ca_ES.UTF-8, cs_CZ.UTF-8, da_DK.UTF-8, de_AT.UTF-8, de_CH.UTF-8, de_DE.UTF-8, el_GR.UTF-8, en_AU.UTF-8, en_CA.UTF-8, en_GB.UTF-8, en_IE.UTF-8, en_NZ.UTF-8, en_US.UTF-8, es_ES.UTF-8, et_EE.UTF-8, eu_ES.UTF-8, fi_FI.UTF-8, fr_BE.UTF-8, fr_CA.UTF-8, fr_CH.UTF-8, fr_FR.UTF-8, he_IL.UTF-8, hr_HR.UTF-8, hu_HU.UTF-8, hy_AM.UTF-8, is_IS.UTF-8, it_CH.UTF-8, it_IT.UTF-8, ja_JP.UTF-8, kk_KZ.UTF-8, ko_KR.UTF-8, lt_LT.UTF-8, nl_BE.UTF-8, nl_NL.UTF-8, no_NO.UTF-8, pl_PL.UTF-8, pt_BR.UTF-8, pt_PT.UTF-8, ro_RO.UTF-8, ru_RU.UTF-8, sk_SK.UTF-8, sl_SI.UTF-8, sr_YU.UTF-8, sv_SE.UTF-8, tr_TR.UTF-8, uk_UA.UTF-8, zh_CN.UTF-8, zh_HK.UTF-8, zh_TW.UTF-8. Make sure pipenv is on the PATH.</span><br></pre></td></tr></table></figure><p>解决方法：<br>如果是简体中文环境，则在 ~/.bash_profile (~/.zshrc) 中设置如下变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export LC_ALL=zh_CN.UTF-8</span><br><span class="line">export LANG=zh_CN.UTF-8</span><br></pre></td></tr></table></figure><p>英文环境，设置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export LC_ALL=en_US.UTF-8</span><br><span class="line">export LANG=en_US.UTF-8</span><br></pre></td></tr></table></figure><p>然后执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source .bash_profile(.zshrc)</span><br></pre></td></tr></table></figure><p>（不推荐）如果任然报错，则可以在项目目录下新建 .env 文件，并拷贝上文中的 shell 脚本。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>pipenv 主要是用来解决 python 版本和包依赖的管理</li><li>熟悉了 pipenv 安装和虚拟环境的搭建</li><li>通过示例来学习 pipenv 的基本命令使用</li><li>通过学习高级命令来使项目具有工程上的可用</li><li>了解使用过程中可能遇到的问题和解决方法</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote><p><a href="https://docs.pipenv.org/" target="_blank" rel="noopener">pipenv doc</a><br><a href="https://github.com/pypa/pipenv" target="_blank" rel="noopener">pipenv github</a><br><a href="http://pylixm.cc/posts/2018-01-13-python-pipenv.html" target="_blank" rel="noopener">pipenv 试用过程分享</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/pypa/pipenv&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pipenv&lt;/a&gt; 是 2017 年 1 月由 &lt;a href=&quot;https://www.kennethreitz.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Kennethreitz&lt;/a&gt; 大神创作，目前已经有 286 个版本发布，可见在 GitHub 上是非常活跃的项目。简单来说 pipenv 的是管理 python 环境和 python 依赖包的工具。使用时 pipenv 会自动创建虚拟环境，并且新增了 Pipfile 文件来维护包依赖， 新增 Pipfile.lock 已在确定环境和依赖后锁定项目，以便最终版本发布。 pipenv 还是 Python.org 正式推荐的 python 包管理工具。&lt;br&gt;引用官方说明：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pipenv — the officially recommended Python packaging tool from Python.org, free (as in freedom).&lt;br&gt;
    
    </summary>
    
      <category term="Technology" scheme="https://blog.51itzone.cn/categories/Technology/"/>
    
      <category term="python" scheme="https://blog.51itzone.cn/categories/Technology/python/"/>
    
    
      <category term="python" scheme="https://blog.51itzone.cn/tags/python/"/>
    
      <category term="pipenv" scheme="https://blog.51itzone.cn/tags/pipenv/"/>
    
  </entry>
  
  <entry>
    <title>详解redis及Ubuntu的安装和运行</title>
    <link href="https://blog.51itzone.cn/2017/10/21/redis-info-install-start-stop/"/>
    <id>https://blog.51itzone.cn/2017/10/21/redis-info-install-start-stop/</id>
    <published>2017-10-21T06:10:25.000Z</published>
    <updated>2018-08-20T02:11:16.649Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写作目的"><a href="#写作目的" class="headerlink" title="写作目的"></a>写作目的</h1><ol><li>了解redis的功能和特点</li><li>记录安装方法和步骤，方便复查</li><li>环境：ubuntu 16.04 LTS redis-4.0.2</li><li>每个知识点背后都有其原因，深究才会掌握知识的本真</li></ol><a id="more"></a><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><a href="https://redis.io/" target="_blank" rel="noopener">Redis</a>由Salvatore Sanfilippo开发于2009年，到今年9月21号已经发布了197个<a href="https://github.com/antirez/redis/releases/" target="_blank" rel="noopener">release</a>版本，目前最新稳定版是4.0.2。Redis是一个开源的使用ANSIC语言编写、支持网络、可基于内存亦可持久化的日志型、灵活的、开源的、key-value存储系统。它允许用户存储大量的数据，而且没有关系数据库的限制。Redis和Memcached类似，但是解决了断电后数据完全丢失的情况(由于redis是异步复制，因此不保证数据完全不丢失，只是解决了不丢失的可能性），而且它支持更多元化的value类型，而且性能相对高效。同时它也支持多种编程语言调用：ActionScript, C, C++, C#, Chicken Scheme, Clojure, Common Lisp, D, Dart, Erlang, Go, Haskell, Haxe, Io, Java, JavaScript (Node.js), Julia, Lua, Objective-C, OCaml, Perl, PHP, Pure Data, Python, R[16], Racket, Ruby, Rust, Scala, Smalltalk and Tcl，并且通过Redis Sentinel提供高可用，通过Redis Cluster提供自动分片。 Redis还支持主从异步复制，非常快的非阻塞初次同步、网络断开时自动重连局部重同步。<br>其他特性包括：</p><ul><li>事务</li><li>订阅/发布</li><li>Lua脚本</li><li>带TTL的键</li><li>LRU回收健</li><li>自动故障转移(failover)</li></ul><h2 id="1、数据模型"><a href="#1、数据模型" class="headerlink" title="1、数据模型"></a>1、数据模型</h2><p>作为Key-value型数据库，Redis也提供了键（Key）和键值（Value）的映射关系。但是，除了常规的数值或字符串，Redis的键值还可以是以下形式：==Lists, Sets, Sorted Sets, Hashes, <a href="https://en.wikipedia.org/wiki/HyperLogLog/" target="_blank" rel="noopener">HyperLogLogs</a>,Bitmaps,<a href="https://en.wikipedia.org/wiki/Geohash/" target="_blank" rel="noopener">Geospatial</a> data(地理空间数据 since Redis 3.2)==。键值的数据类型决定了该键值支持的操作。Redis支持诸如列表、集合或有序集合的交集、并集、差集等高级原子操作；同时，如果键值的类型是普通数字，Redis则提供自增等原子操作。</p><h2 id="2、持久化"><a href="#2、持久化" class="headerlink" title="2、持久化"></a>2、持久化</h2><p>通常，Redis将数据全部存储于内存中，或被配置为使用虚拟内存(since Redis 2.3)，此功能已经被弃用，来保存到磁盘上。<br>现在Redis可以通过以下两种方式实现数据持久化:</p><ol><li>使用快照的方式，异步将内存中的数据不断写入磁盘；</li><li>使用AOF(append-only file)(since Redis 1.1)的方式，类似MySQL的日志方式，以增量的方式记录每次更新的日志。</li></ol><p>前者性能较高，但是可能会引起一定程度的数据丢失；后者相反。默认情况下Redis每2秒会写入数据到文件系统，当然如果需要这个时间是可配置的。如果系统宕机，那么只会有几秒的数据会丢失。如果对此感兴趣，可以阅读作者的博文 <a href="http://oldblog.antirez.com/post/redis-persistence-demystified.html/" target="_blank" rel="noopener">Redis persistence demystified</a>或者此文<a href="http://powersoft.iteye.com/blog/2147091/" target="_blank" rel="noopener">Redis官方文档(13) ——持久化</a></p><h2 id="3、复制"><a href="#3、复制" class="headerlink" title="3、复制"></a>3、复制</h2><p>Redis支持将数据同步到多台从库上，这种特性对提高读取性能非常有益。Replication是Redis最重要的功能，但也是坑最多的功能，想掌握好，需要了解这些内容。</p><ul><li>Redis 采用异步复制(since Redis 2.8)。 一个主服务器可以拥有多个从服务器。</li><li>从服务器可以接受其他从服务器的连接会形成==图状结构==。</li><li>Redis 的复制在主服务器上是非阻塞的。</li><li>Redis 的复制在从服务器上也是非阻塞的。</li><li>复制可以用来支持可伸缩性，用多个从服务器处理只读查询(例如，繁重的 SORT 操作可以分配到从服务器上)，也可以仅仅作为数据冗余。</li></ul><h2 id="4-高可用"><a href="#4-高可用" class="headerlink" title="4 高可用"></a>4 高可用</h2><p>Redis Sentinel 是 Redis 的官方高可用解决方案，是设计用来帮助管理 Redis 实例的系统。用于完成下面 4 个任务：</p><ul><li>监控(Monitoring)。Sentinel 不断检查你的主从实例是否运转正常。</li><li>通知(Notification)。Sentinel 可以通过 API 来通知系统管理员，或者其他计算机程序，被监控的 Redis 实例出了问题。</li><li>自动故障转移(Automatic failover)。如果一台主服务器运行不正常，Sentinel会开始一个故障转移过程，将从服务器提升为主服务器，配置其他的从服务器使用新的主服务器，使用 Redis 服务器的应用程序在连接时会收到新的服务器地址通知。</li><li>配置提供者(Configuration provider)。Sentinel 充当客户端服务发现的权威来源：客户端连接到 Sentinel 来询问某个服务的当前 Redis主服务器的地址。当故障转移发生时，Sentinel 会报告新地址。</li></ul><h2 id="5-集群"><a href="#5-集群" class="headerlink" title="5 集群"></a>5 集群</h2><p>支持分布式系统，成为Redis能持续不断发展的动力，也是能被广泛使用的亮点。我们看看redis集群都能做什么</p><ul><li>Redis 集群提供一种运行 Redis 的方式，数据被自动的分片到多个 Redis 节点。</li><li>集群不支持处理多个键的命令，因为这需要在 Redis 节点间移动数据，使得 Redis 集群不能提供像 Redis 单点那样的性能，在高负载下会表现得不可预知。</li><li>Redis 集群也提供在网络分割（partitions）期间的一定程度的可用性，这就是在现实中当一些节点失败或者不能通信时能继续进行运转的能力。</li></ul><p>当然上文只是对 Redis 功能的一个概览，如果想深入学习，每个特性都可以写一系列文章，本文就不再详细展开叙述。</p><h1 id="安装及运行-redis"><a href="#安装及运行-redis" class="headerlink" title="安装及运行 redis"></a>安装及运行 redis</h1><h2 id="1、检测是否有安装redis"><a href="#1、检测是否有安装redis" class="headerlink" title="1、检测是否有安装redis"></a>1、检测是否有安装redis</h2><p>使用linux命令 <a href="http://man.linuxde.net/whereis/" target="_blank" rel="noopener">whereis</a> 查找是否安装 redis-cli 和 redis-server</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@ubuntu-linux:~$ whereis redis-cli</span><br><span class="line">redis-cli:</span><br><span class="line"></span><br><span class="line">ubuntu@ubuntu-linux:~$ whereis redis-server</span><br><span class="line">redis-server:</span><br></pre></td></tr></table></figure><h2 id="2、安装-Redis"><a href="#2、安装-Redis" class="headerlink" title="2、安装 Redis"></a>2、安装 Redis</h2><h3 id="通过-apt-get-命令安装"><a href="#通过-apt-get-命令安装" class="headerlink" title="通过 apt-get 命令安装"></a>通过 apt-get 命令安装</h3><ul><li>命令：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install redis-server</span><br></pre></td></tr></table></figure><h3 id="通过下载官方安装包进行安装并解压"><a href="#通过下载官方安装包进行安装并解压" class="headerlink" title="通过下载官方安装包进行安装并解压"></a>通过下载官方安装包进行安装并解压</h3><ul><li>本文不是用 root 用户安装</li><li>命令：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-4.0.2.tar.gz</span><br><span class="line">tar -zxvf redis-4.0.2.tar.gz</span><br></pre></td></tr></table></figure><ul><li>移到解压后的 Redis 到/usr/local/redis-4.0.2</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv redis-4.0.2 /usr/local/</span><br></pre></td></tr></table></figure><ul><li>编译以及安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/redis-4.0.2</span><br><span class="line">make</span><br><span class="line">suod make install</span><br></pre></td></tr></table></figure><h2 id="3、启动-Redis"><a href="#3、启动-Redis" class="headerlink" title="3、启动 Redis"></a>3、启动 Redis</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/local/bin/redis-server</span><br></pre></td></tr></table></figure><p>==注意：非 root 启动,如果用命令直接关闭redis，redis无法结束进程==</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">11462:M 21 Nov 17:15:54.777 # User requested shutdown...</span><br><span class="line">11462:M 21 Nov 17:15:54.777 * Saving the final RDB snapshot before exiting.</span><br><span class="line">11462:M 21 Nov 17:15:54.777 # Failed opening the RDB file dump.rdb (in server root dir /usr/local/bin) for saving: Permission denied</span><br><span class="line">11462:M 21 Nov 17:15:54.777 # Error trying to save the DB, can't exit.</span><br></pre></td></tr></table></figure><ul><li>指定配置文件启动</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo /usr/local/bin/redis-server /usr/local/redis-4.0.2/redis.conf &amp;</span><br></pre></td></tr></table></figure><ul><li>检测后台进程是否存在</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef |grep redis</span><br></pre></td></tr></table></figure><ul><li>检测 6379 端口是否在监听</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -lntp | grep 6379</span><br></pre></td></tr></table></figure><ul><li>使用 redis-cli 进行连接</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@ubuntu-linux:/usr/local/bin$ redis-cli</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty list or set)</span><br><span class="line">127.0.0.1:6379&gt; set redis redis-4.0.2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get redis</span><br><span class="line">"redis-4.0.2"</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h2 id="4、停止-Redis"><a href="#4、停止-Redis" class="headerlink" title="4、停止 Redis"></a>4、停止 Redis</h2><ul><li>使用 redis-cli 停止</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli shutdown</span><br></pre></td></tr></table></figure><ul><li>或在 redis-cli 命令行中停止</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; shutdown</span><br><span class="line">not connected&gt;</span><br></pre></td></tr></table></figure><ul><li>直接 kill 掉进程（ Redis 可以妥善处理 SIGTERM 信号）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 PID</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Redis 是开发人员必备的利器，掌握好 Redis 的功能特性并使用到实际场景才能真正体会到 Redis 的带来的便利。目前 Redis 主要应用场景如下：</p><ul><li>构建高可用的缓存系统</li><li>积分排行榜（ sorted set ）</li><li>计数器</li><li>分布式锁</li><li>消息中间件（ message queue / pub/sub)</li><li>web服务器的session管理</li></ul><blockquote><p>参考资料</p><ol><li><a href="https://redis.io/documentation/" target="_blank" rel="noopener">Redis</a></li><li><a href="https://en.wikipedia.org/wiki/Redis/" target="_blank" rel="noopener">Redis wikipedia</a></li><li><a href="https://github.com/JasonLai256/the-little-redis-book/blob/dcb68a2a1cbf1a4e328dc5eb980f4f525ab291c6/cn/redis.md" target="_blank" rel="noopener">the-little-redis-book</a></li><li><a href="http://www.iteye.com/blogs/subjects/redis3/" target="_blank" rel="noopener">Redis3.0官方文档翻译和源码解析</a></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;写作目的&quot;&gt;&lt;a href=&quot;#写作目的&quot; class=&quot;headerlink&quot; title=&quot;写作目的&quot;&gt;&lt;/a&gt;写作目的&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;了解redis的功能和特点&lt;/li&gt;
&lt;li&gt;记录安装方法和步骤，方便复查&lt;/li&gt;
&lt;li&gt;环境：ubuntu 16.04 LTS redis-4.0.2&lt;/li&gt;
&lt;li&gt;每个知识点背后都有其原因，深究才会掌握知识的本真&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Technology" scheme="https://blog.51itzone.cn/categories/Technology/"/>
    
      <category term="Redis" scheme="https://blog.51itzone.cn/categories/Technology/Redis/"/>
    
    
      <category term="Ubuntu" scheme="https://blog.51itzone.cn/tags/Ubuntu/"/>
    
      <category term="redis" scheme="https://blog.51itzone.cn/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>LinkedList 实现分析及使用</title>
    <link href="https://blog.51itzone.cn/2016/02/26/linkedlist-analysis-and-use/"/>
    <id>https://blog.51itzone.cn/2016/02/26/linkedlist-analysis-and-use/</id>
    <published>2016-02-26T10:46:00.000Z</published>
    <updated>2018-08-20T02:11:16.648Z</updated>
    
    <content type="html"><![CDATA[<p>jdk中的绝大部分代码都是经过千锤百炼的，代码质量非常之高，在了解其底层实现的过程中，也可以帮助我们提高编码规范，养成良好的习惯。知识在于总结和利用，基础知识的完善会让工作变更加轻松。本文通过分析 LinkedList 的底层实现来学习 LinkdedList 的使用。<br><a id="more"></a></p><h1 id="LinkedList-实现分析"><a href="#LinkedList-实现分析" class="headerlink" title="LinkedList 实现分析"></a>LinkedList 实现分析</h1><p><a href="https://en.wikipedia.org/wiki/Linked_list" target="_blank" rel="noopener">LinkedList</a> 是实现 list 的线性存储结构的一个重要的实现类，LinkedList 是通过链表的形式存放数据，而ArrayList和Vector是通过数组存储的顺序结构。当然， LinkedList 也是非线程安全的，我们会在后文说明如何在多线程环境中使用它。</p><h1 id="LinkedList具体实现类图如下："><a href="#LinkedList具体实现类图如下：" class="headerlink" title="LinkedList具体实现类图如下："></a>LinkedList具体实现类图如下：</h1><p><img src="/images/post/2016/02/linked_list.png" alt="LinkedList 类继承关系"></p><p>通过图中的我们可以清晰的看到 <code>LinkedList</code> 即实现了 <code>list</code> 接口又实现了 <code>Deque</code> 接口。那说明 LinkedList 具有所有 list 的功能同时，还具备队列的功能。通过阅读 JDK 的源码文档，我们发现 LinkedList 是基于双向队列的数据结构实现的 （<a href="https://en.wikipedia.org/wiki/Doubly_linked_list" target="_blank" rel="noopener">Doubly-linked list</a>）。</p><p>具体结构我们可以参考下图：</p><p><img src="/images/post/2016/02/double_linked_list.jpg" alt="双向链表数据结构"></p><h1 id="双向链表的数据结构"><a href="#双向链表的数据结构" class="headerlink" title="双向链表的数据结构"></a>双向链表的数据结构</h1><p><code>LinkedList</code> 是通过<a href="https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8" target="_blank" rel="noopener">链表</a>结构来存储数据,而且实现的是双向链表。双向链表是数据结构的一种形式，他的每个节点维护两个指针， prev 指向上一个节点，next 指向下一个节点。这种结构有什么特点呢？他可以实现双向遍历，这使得在链表中的数据读取变得非常灵活自由。同时，LinkedList 中维护了两个指针，一个指向头部，一个指向尾部。维护这两个指针后，可以使得元素从头部插入，也可以使元素从尾部插入。基于方式，用户很容易就能实现 FIFO(队列)， LIFO(栈)等效果。那么下面我们来看一下源码中的具体实现。</p><h2 id="Node定义"><a href="#Node定义" class="headerlink" title="Node定义"></a>Node定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    E item;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.item = element;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">        <span class="keyword">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LinkedList列表的新增"><a href="#LinkedList列表的新增" class="headerlink" title="LinkedList列表的新增"></a>LinkedList列表的新增</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Links e as last element.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">    last = newNode;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见每次插入都是移动引用，和 ArrayList 的拷贝数组来说效率要高上不少。</p><h2 id="LinkedList列表的查询"><a href="#LinkedList列表的查询" class="headerlink" title="LinkedList列表的查询"></a>LinkedList列表的查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    <span class="keyword">return</span> node(index).item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert isElementIndex(index);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">        Node&lt;E&gt; x = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">            x = x.next;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;E&gt; x = last;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">            x = x.prev;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LinkedList使用二分查找来看 <code>index</code> 离 size 中间距离来判断是从头结点正序查还是从尾节点倒序查。这样的效率是非常低的，特别是当 index 距离 size 的中间位置越远时。</p><h2 id="LinkedList-迭代实现"><a href="#LinkedList-迭代实现" class="headerlink" title="LinkedList 迭代实现"></a>LinkedList 迭代实现</h2><p>LinkedList 的迭代器实现有两个，一个是实现了Iterator接口的DescendingIterator，另一个则是实现了 ListIterator 接口的 ListItr 。</p><h3 id="ListItr-实现"><a href="#ListItr-实现" class="headerlink" title="ListItr 实现"></a>ListItr 实现</h3><p>ListItr遍历需要指定一个起始值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    checkPositionIndex(index);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ListItr(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ListItr 会创建一个以 index 为起始值的迭代器，然后用户便可以以这个位置为起点，实现向前或者向后遍历。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">ListItr(<span class="keyword">int</span> index) &#123;</span><br><span class="line">    <span class="comment">// 实例化的时候，将next指针指向指定位置的元素</span></span><br><span class="line">    next = (index == size) ? <span class="keyword">null</span> : node(index);</span><br><span class="line">    nextIndex = index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向后遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    checkForComodification();</span><br><span class="line">    <span class="keyword">if</span> (!hasNext())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line"></span><br><span class="line">    lastReturned = next;</span><br><span class="line">    next = next.next;</span><br><span class="line">    nextIndex++;</span><br><span class="line">    <span class="keyword">return</span> lastReturned.item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向前遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">previous</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    checkForComodification();</span><br><span class="line">    <span class="keyword">if</span> (!hasPrevious())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line"></span><br><span class="line">    lastReturned = next = (next == <span class="keyword">null</span>) ? last : next.prev;</span><br><span class="line">    nextIndex--;</span><br><span class="line">    <span class="keyword">return</span> lastReturned.item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DescendingIterator-实现"><a href="#DescendingIterator-实现" class="headerlink" title="DescendingIterator 实现"></a>DescendingIterator 实现</h3><p>DescendingIterator 迭代器实现的是对链表从尾部向头部遍历的功能，他复用了ListItr中的previous方法，将当前位置指向链表尾部，然后逐个向前遍历。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">DescendingIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ListItr itr = <span class="keyword">new</span> ListItr(size());</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> itr.hasPrevious();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> itr.previous();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        itr.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="LinkedList-的队列实现"><a href="#LinkedList-的队列实现" class="headerlink" title="LinkedList 的队列实现"></a>LinkedList 的队列实现</h1><p>从图1我们可以发现 LinkedList 实现了 Deque 接口，以下我们可以从实现队列的功能来看 LinkedList 的源码</p><h2 id="LikedList-的-FIFO-队列的实现"><a href="#LikedList-的-FIFO-队列的实现" class="headerlink" title="LikedList 的 FIFO 队列的实现"></a>LikedList 的 FIFO 队列的实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 入队功能，入尾</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在队列尾部增加一条记录，建议使用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> add(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offerLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    addLast(e);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在队列尾部增加一条记录</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法包装，同样调用了linkLast的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="comment">//创建一个节点，将 prev 指针指向链表的尾节点</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">    last = newNode;</span><br><span class="line">    <span class="comment">//将last指针指向新创建的这个节点</span></span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">        <span class="comment">//如果当前链表为空，那么将头指针也指向这个节点</span></span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">//将链表的尾节点的next指针指向新建的节点，这样就完整的实现了在链表尾部添加一个元素的功能</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出队功能，从尾出队</span></span><br><span class="line"><span class="comment">//在队列头部取出一个元素并删除， 队列操作建议使用这个方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">poll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">    <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : unlinkFirst(f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//同上，都调用了 unlinkFirst 方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">pollFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">    <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : unlinkFirst(f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> E <span class="title">unlinkFirst</span><span class="params">(Node&lt;E&gt; f)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert f == first &amp;&amp; f != null;</span></span><br><span class="line">    <span class="keyword">final</span> E element = f.item;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; next = f.next;</span><br><span class="line">    f.item = <span class="keyword">null</span>;</span><br><span class="line">    f.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">    first = next;</span><br><span class="line">    <span class="keyword">if</span> (next == <span class="keyword">null</span>)</span><br><span class="line">        last = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">        next.prev = <span class="keyword">null</span>;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LinkedList-的-LIFO-栈-实现"><a href="#LinkedList-的-LIFO-栈-实现" class="headerlink" title="LinkedList 的 LIFO (栈)实现"></a>LinkedList 的 LIFO (栈)实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在链表的头部添加一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    addFirst(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// addFirst 调用的就是 linkFirst ，这段代码就是实现将元素添加的链表头部。</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">linkFirst</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">    <span class="comment">// 创建一个新元素，将元素的 next 指针指向当前的头结点</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(<span class="keyword">null</span>, e, f);</span><br><span class="line">    <span class="comment">// 将头指针指向这个节点。</span></span><br><span class="line">    first = newNode;</span><br><span class="line">    <span class="keyword">if</span> (f == <span class="keyword">null</span>)</span><br><span class="line">        <span class="comment">// 如果当前节点为空，则把尾指针指向这个节点。</span></span><br><span class="line">        last = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">// 将当前头结点的 prev 指针指向此结点。</span></span><br><span class="line">        f.prev = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 弹出顶部结点。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> removeFirst();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// removeFirst 调用的就是 unlinkFirst，unlinkFirst 实现将链表顶部元素删除</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> E <span class="title">unlinkFirst</span><span class="params">(Node&lt;E&gt; f)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert f == first &amp;&amp; f != null;</span></span><br><span class="line">    <span class="keyword">final</span> E element = f.item;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; next = f.next;</span><br><span class="line">    f.item = <span class="keyword">null</span>;</span><br><span class="line">    f.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">    first = next;</span><br><span class="line">    <span class="keyword">if</span> (next == <span class="keyword">null</span>)</span><br><span class="line">        last = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        next.prev = <span class="keyword">null</span>;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取顶部结点，但是不删除</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">    <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : f.item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><ul><li>克服数组链表需要预先知道数据大小的缺点。</li><li>可以充分利用计算机内存空间，实现灵活的内存动态管理。</li><li>LinkedList 插入，删除都是移动引用效率很高。</li><li>查找需要进行遍历查询，效率较低。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jdk中的绝大部分代码都是经过千锤百炼的，代码质量非常之高，在了解其底层实现的过程中，也可以帮助我们提高编码规范，养成良好的习惯。知识在于总结和利用，基础知识的完善会让工作变更加轻松。本文通过分析 LinkedList 的底层实现来学习 LinkdedList 的使用。&lt;br&gt;
    
    </summary>
    
      <category term="Technology" scheme="https://blog.51itzone.cn/categories/Technology/"/>
    
      <category term="Java" scheme="https://blog.51itzone.cn/categories/Technology/Java/"/>
    
    
      <category term="Java" scheme="https://blog.51itzone.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>ArrayList &amp; Vector 实现分析</title>
    <link href="https://blog.51itzone.cn/2016/02/20/ArrayList-Vector-analysis/"/>
    <id>https://blog.51itzone.cn/2016/02/20/ArrayList-Vector-analysis/</id>
    <published>2016-02-20T10:46:00.000Z</published>
    <updated>2018-08-20T02:11:16.647Z</updated>
    
    <content type="html"><![CDATA[<p>通过阅读 ArrayList 与 Verctor 的源码我们发现，它们的代码实现近似度几乎在90%。所以我把它们两个合并起来进行说明，细心的读者可以自行去IDE中阅读，比对他们的实现结构。本文主要结合 JDK8 源码介绍了 ArrayList 和 Vector 的创建、增、删、改以及集合的迭代和 fail-fast 机制，并说明了在操作子集的一些注意事项及原因。</p><blockquote><p>无特别说明，JDK 源码讲解都是基于 JDK8 进行的分析。<br><a id="more"></a></p></blockquote><h1 id="ArrayList-和-Vector-的异同"><a href="#ArrayList-和-Vector-的异同" class="headerlink" title="ArrayList 和 Vector 的异同"></a>ArrayList 和 Vector 的异同</h1><p>在讲它们的异同点之前，我们先看看 ArrayList 和 Vector 的继承结构图<br><img src="/images/post/2016/02/array_list.jpg" alt="ArrayList 类继承关系"> <img src="/images/post/2016/02/vector.jpg" alt="Vector 类继承关系"></p><h2 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h2><ol><li>都是<strong>有序</strong>的，插入元素可重复，支持插入 null ，支持随机访问。</li><li>从上图可以发现 ArrayList 和 Vector 继承了相同的父类和实现了相同的接口，所以提供的功能也基本相同。</li><li>集合中维护的都是 Object 类型的数组，通过泛型方式来指定数组的类型。</li><li>初始如果没有指定集合的长度大小，则集合默认数组长度都为10。</li><li>都实现了 Iterator 和 ListIterator 接口，所以具有相同的遍历方式。</li><li>ArrayList 和 Vector 都具有动态扩容的特性。</li></ol><h2 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h2><ol><li>Vector 的实现是线程安全的，因为操作集合的方法使用了关键字 <strong>Synchronized</strong> ，而使用线程同步的最大问题就是大并发下，操作集合程序性能会严重降低，而 ArrayList 的实现是线程不安全的，所以不考虑线程安全的情况，尽量使用 ArrayList。</li><li>当 ArrayList 和 Vector 的大小超过当前所能容纳元素的数组大小时，ArrayList 会扩大为当前数组的 50% 来容纳新元素，而 Vector中有一个<code>capacityIncrement</code> 变量，如果 capacityIncrement &gt; 0, 则每次扩容都在原来大小基础上增加 capacityIncrement 大小， 反之，Vector 就在原大小基础上再扩充一倍。</li><li>Vector中有一个方法 setSize(int newSize)，而ArrayList并没有。 setSize 允许用户主动设置容器大小，如果newSize小于当前 size ，<strong>那么elementData 数组中只会保留 newSize 个元素，多出来的会设为 null</strong>。如果newSize大于当前 size ，那么就扩容到 newSize 大小，数组中多出来的部分设为 null，以后添加元素的时候，之前多出来的部分就会以 null 的形式存在。</li></ol><h1 id="集合创建"><a href="#集合创建" class="headerlink" title="集合创建"></a>集合创建</h1><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Shared empty array instance used for empty instances.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 序列化时，忽略该值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">transient</span> Object[] elementData;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Shared empty array instance used for default sized empty instances. We</span></span><br><span class="line"><span class="comment"> * distinguish this from EMPTY_ELEMENTDATA to know how much to inflate when</span></span><br><span class="line"><span class="comment"> * first element is added.</span></span><br><span class="line"><span class="comment"> * 与 EMPTY_ELEMENTDATA 区分开的目的是，添加第一个元素的时候可以确定数组的指定长度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+ initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    elementData = c.toArray();</span><br><span class="line">    <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">        <span class="keyword">if</span> (elementData.getClass() != Object[].class)</span><br><span class="line">            elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// replace with empty array.</span></span><br><span class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ArrayList 提供了三种方式来进行初始化，当使用默认构造器初始化集合时，数据存储在静态变量 DEFAULTCAPACITY_EMPTY_ELEMENTDATA 数组中，<strong>这个数组是由 static 和 final 修饰，使用静态变量的好处就是 JVM 加载类的同时，会把静态变量存储于 JVM 的方法区（各个线程共享的内存区域），与每次 new Object[initialCapacity] 相比，就减少了系统的开销，而使用 final 修饰指定该变量不能修改，是因为这是一个公共变量，修改后，会影响后续新初始化的 ArrayList</strong>。如果使用可以指定集合初始化大小构造器进行，如果指定大小为0 ，则把 EMPTY_ELEMENTDATA 赋值给初 elementData，如果指定的大小大于 0 ，则需要 new Object[initialCapacity] 并把新创建的数组赋值给  elementData 数组变量。DEFAULTCAPACITY_EMPTY_ELEMENTDATA 和 EMPTY_ELEMENTDATA 主要是为了区分不同构造器创建的 ArrayList 对象，这个后面会进行详细介绍。 ArrayList 提供接受实现 Collection 接口的实现类来进行初始化。</p><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">protected</span> Object[] elementData;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> elementCount;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> capacityIncrement;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">int</span> capacityIncrement)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span> + initialCapacity);</span><br><span class="line">    <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">    <span class="keyword">this</span>.capacityIncrement = capacityIncrement;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(initialCapacity, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    elementData = c.toArray();</span><br><span class="line">    elementCount = elementData.length;</span><br><span class="line">    <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">    <span class="keyword">if</span> (elementData.getClass() != Object[].class)</span><br><span class="line">        elementData = Arrays.copyOf(elementData, elementCount, Object[].class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Vector 与 ArrayList 不同的是提供了一个可以指定 capacityIncrement （增加因子）的构造器，增长因子的作用主要是对数组进行扩容时，指定数组在原来数组长度的基础上在扩容多大</strong>。</p><h1 id="集合增加、修改元素"><a href="#集合增加、修改元素" class="headerlink" title="集合增加、修改元素"></a>集合增加、修改元素</h1><p>ArrayList 集合新增元素主要是调用 <strong>add(E e)</strong> 和 <strong>add(int index, E element)</strong> 方法，添加元素之前，都需要对数组扩容进行检查，add(E e) 在数组末尾添加元素，add(int index, E element) 是在数组指定位置添加元素，所以该位置后的原数组元素都要向后移动一位。修改元素调用 <strong>set(int index, E e)</strong>，替换掉元数组，size 不变，下面我们通过具体源码进行学习。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 检查扩容</span></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    <span class="comment">//每次都会把最新添加的元素放到数组末尾</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//检查数组是否越界</span></span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    <span class="comment">//移动指定位置后的元素</span></span><br><span class="line">    System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>, size - index);</span><br><span class="line">    <span class="comment">//插入元素</span></span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加集合元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    Object[] a = c.toArray();</span><br><span class="line">    <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">    ensureCapacityInternal(size + numNew);  <span class="comment">// Increments modCount</span></span><br><span class="line">    <span class="comment">// 数组移动并拷贝到 elementData 数组中</span></span><br><span class="line">    System.arraycopy(a, <span class="number">0</span>, elementData, size, numNew);</span><br><span class="line">    size += numNew;</span><br><span class="line">    <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在指定位置添加集合元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">    Object[] a = c.toArray();</span><br><span class="line">    <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">    ensureCapacityInternal(size + numNew);  <span class="comment">// Increments modCount</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="comment">//对自身进行移动并 copy 元素</span></span><br><span class="line">        System.arraycopy(elementData, index, elementData, index + numNew,</span><br><span class="line">                         numMoved);</span><br><span class="line">    <span class="comment">// copy 集合中的元素到 elementData 中</span></span><br><span class="line">    System.arraycopy(a, <span class="number">0</span>, elementData, index, numNew);</span><br><span class="line">    size += numNew;</span><br><span class="line">    <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateCapacity</span><span class="params">(Object[] elementData, <span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// DEFAULTCAPACITY_EMPTY_ELEMENTDATA 的作用</span></span><br><span class="line">    <span class="comment">//使用默认构造器创建的对象，第一次新增元素时，指定数组默认长度为10</span></span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minCapacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="comment">//oldCapacity &gt;&gt; 1和oldCapacity / 2是等效的，newCapacity为原来的1.5倍</span></span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)  <span class="comment">//数组不是无限大，需注意</span></span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    <span class="comment">//进行数组拷贝，Arrays.copyOf的底层是一个native方法</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">        Integer.MAX_VALUE :</span><br><span class="line">        MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找元素 O(1)</span></span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line">    <span class="comment">//替换掉原数据</span></span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= size)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A version of rangeCheck used by add and addAll.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheckForAdd</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="function">E <span class="title">elementData</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态扩容"><a href="#动态扩容" class="headerlink" title="动态扩容"></a>动态扩容</h2><p>ArrayList 和 Vector 的新增、修改元素的逻辑基本一致，不同的地方就是会在每个方法上使用 <strong>synchronized</strong> 关键字进行同步，这里重点说明下他们动态扩容的不同之处.</p><p><strong>Vector</strong> 的动态扩容机制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">//数组扩容</span></span><br><span class="line">    ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//末尾插入元素</span></span><br><span class="line">    elementData[elementCount++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityHelper</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="comment">// capacityIncrement &gt; 0 则扩容 capacityIncrement 大小，否则扩容原来的一倍</span></span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + ((capacityIncrement &gt; <span class="number">0</span>) ?</span><br><span class="line">                                     capacityIncrement : oldCapacity);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">        Integer.MAX_VALUE :</span><br><span class="line">        MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结合 ArrayList 的扩容代码，可以明显看出与 Vector 的不同之处，所以使用类之前阅读代码是很好的编程习惯。</p><h1 id="删除集合里的元素"><a href="#删除集合里的元素" class="headerlink" title="删除集合里的元素"></a>删除集合里的元素</h1><p>我们这里使用 ArrayList 来说明集合删除元素的逻辑，删除也分为对单个元素的删除和集合删除。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="comment">//直接进行数组拷贝操作，把index后的所有元素向前移动一位。</span></span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index, numMoved);</span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//之所以叫做快速删除，是因为他被设置为一个私有方法，只能在内部调用，删除元素的时候，省去了数组越界的判断。</span></span><br><span class="line"><span class="comment">//也不返回被删除的元素，直接进行数组拷贝操作。</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index, numMoved);</span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除集合中指定的元素，指定中的集合元素不能为 null</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(c);</span><br><span class="line">    <span class="keyword">return</span> batchRemove(c, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除不在集合中的元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(c);</span><br><span class="line">    <span class="keyword">return</span> batchRemove(c, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//批量循环删除</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">batchRemove</span><span class="params">(Collection&lt;?&gt; c, <span class="keyword">boolean</span> complement)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Object[] elementData = <span class="keyword">this</span>.elementData;</span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, w = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">boolean</span> modified = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (; r &lt; size; r++)</span><br><span class="line">            <span class="comment">// c.contains 默认的是 Collection 接口的方法，在 AbstractCollection 中采用 Iterator 机制来判断是否包含元素，ArrayList 自己实现了此方法</span></span><br><span class="line">            <span class="comment">// complement 删除方法调用传入的是 false</span></span><br><span class="line">            <span class="comment">// 第一，作者巧妙的提取了逻辑上的最大公约数，仅通过一行逻辑判断就实现了两个互斥的效果。</span></span><br><span class="line">            <span class="comment">// 第二，作者的所用操作都集中于 elementData 一个数组上，避免了资源的浪费。</span></span><br><span class="line">            <span class="keyword">if</span> (c.contains(elementData[r]) == complement)</span><br><span class="line">                elementData[w++] = elementData[r];</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// Preserve behavioral compatibility with AbstractCollection, even if c.contains() throws.</span></span><br><span class="line">        <span class="comment">// 理论上r==size 只有当出现异常情况的时候，才会出现r!=size，一旦出现了异常，那么务必要将之前被修改过的数组再还原回来。</span></span><br><span class="line">        <span class="keyword">if</span> (r != size) &#123;</span><br><span class="line">            System.arraycopy(elementData, r, elementData, w, size - r);</span><br><span class="line">            w += size - r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 删除 w 位置后的元素</span></span><br><span class="line">        <span class="keyword">if</span> (w != size) &#123;</span><br><span class="line">            <span class="comment">// clear to let GC do its work</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = w; i &lt; size; i++)</span><br><span class="line">                elementData[i] = <span class="keyword">null</span>;</span><br><span class="line">            modCount += size - w;</span><br><span class="line">            size = w;</span><br><span class="line">            modified = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> modified;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="集合元素的迭代（顺序迭代）"><a href="#集合元素的迭代（顺序迭代）" class="headerlink" title="集合元素的迭代（顺序迭代）"></a>集合元素的迭代（顺序迭代）</h1><p>ArrayList 迭代器是通过实现 Iterator 接口 和 ListIterator 接口实现集合的顺序迭代，Iterator 接口主要是向后遍历集合元素，遍历的同时可以对集合中的元素进行删除。ListIterator 是 List 接口提供的方法返回类型，集合类自行实现 ListIterator 接口来实现双向迭代功能， 同时 ListIterator 接口在 Iterator 接口的功能上提供了向前遍历，指定位置前后遍历，修改集合元素，添加集合元素的功能。我们通过源码具体分析 ArrayList 迭代器的实现。</p><h2 id="Iterator-接口"><a href="#Iterator-接口" class="headerlink" title="Iterator 接口"></a>Iterator 接口</h2><p>Iterator 接口规范了 Java 集合迭代的方式，通过使用迭代器，方便的迭代集合中的元素。同时也是设计模式里的迭代器模式在 JDK 里的具体实现。Java集合中实现 Collection 接口的都实现了 Iterable  接口。</p><h2 id="Iterable-接口"><a href="#Iterable-接口" class="headerlink" title="Iterable 接口"></a>Iterable 接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// add JDK1.8</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(action);</span><br><span class="line">        <span class="keyword">for</span> (T t : <span class="keyword">this</span>) &#123;</span><br><span class="line">            action.accept(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// add JDK1.8</span></span><br><span class="line">    <span class="comment">// JDK 1.8 提供的分割迭代</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Spliterator&lt;T&gt; <span class="title">spliterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Spliterators.spliteratorUnknownSize(iterator(), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断是否存在下一个元素对象</span></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取下一个元素</span></span><br><span class="line">        <span class="function">E <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// JDK 1.8 支持接口里的方法可以有实现</span></span><br><span class="line">        <span class="comment">//删除一个元素</span></span><br><span class="line">        <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"remove"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// JDK 1.8 新增</span></span><br><span class="line">        <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</span><br><span class="line">            Objects.requireNonNull(action);</span><br><span class="line">            <span class="keyword">while</span> (hasNext())</span><br><span class="line">                action.accept(next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">`</span><br></pre></td></tr></table></figure><h2 id="ArrayList-的-iterator-代码实现分析"><a href="#ArrayList-的-iterator-代码实现分析" class="headerlink" title="ArrayList 的 iterator 代码实现分析"></a>ArrayList 的 iterator 代码实现分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//Iterable 接口的方法实现</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Itr();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//An optimized version of AbstractList.Itr</span></span><br><span class="line"><span class="comment">//大家可以看下 AbstractList 的 Itr 实现</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 游标</span></span><br><span class="line">    <span class="keyword">int</span> cursor;       <span class="comment">// index of next element to return</span></span><br><span class="line">    <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></span><br><span class="line">    <span class="comment">//集合修改标志</span></span><br><span class="line">    <span class="comment">//关于快速失败机制的实现，稍后会有讲解</span></span><br><span class="line">    <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"></span><br><span class="line">    Itr() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cursor != size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 检查集合是否被修改</span></span><br><span class="line">        checkForComodification();</span><br><span class="line">        <span class="keyword">int</span> i = cursor;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        cursor = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用此方法前，必须调用 next() 方法, 如果不调 next() 方法, 那么 lastRet == -1,程序会报错抛异常</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">        checkForComodification();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ArrayList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">            cursor = lastRet;</span><br><span class="line">            lastRet = -<span class="number">1</span>;</span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; consumer)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(consumer);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> size = ArrayList.<span class="keyword">this</span>.size;</span><br><span class="line">        <span class="keyword">int</span> i = cursor;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= elementData.length) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i != size &amp;&amp; modCount == expectedModCount) &#123;</span><br><span class="line">            consumer.accept((E) elementData[i++]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// update once at end of iteration to reduce heap write traffic</span></span><br><span class="line">        cursor = i;</span><br><span class="line">        lastRet = i - <span class="number">1</span>;</span><br><span class="line">        checkForComodification();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// List 接口的方法实现</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ListItr(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在指定位置处遍历</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span>+index);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ListItr(index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承 Itr 类，同时拥有父类的所有特性</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListItr</span> <span class="keyword">extends</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//指定位置进行遍历</span></span><br><span class="line">    ListItr(<span class="keyword">int</span> index) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        cursor = index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向前遍历集合</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cursor != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cursor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">previousIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cursor - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">previous</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        <span class="comment">// 向前遍历，游标 - 1</span></span><br><span class="line">        <span class="keyword">int</span> i = cursor - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        cursor = i;</span><br><span class="line">        <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改集合元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">        checkForComodification();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ArrayList.<span class="keyword">this</span>.set(lastRet, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新增集合元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> i = cursor;</span><br><span class="line">            ArrayList.<span class="keyword">this</span>.add(i, e);</span><br><span class="line">            cursor = i + <span class="number">1</span>;</span><br><span class="line">            lastRet = -<span class="number">1</span>;</span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="为什么要有迭代器"><a href="#为什么要有迭代器" class="headerlink" title="为什么要有迭代器"></a>为什么要有迭代器</h2><p>我们已经清楚了 ArrayList 集合的具体迭代实现，但是有没有想过 Java 为什么要实现迭代器的方式来遍历集合呢，其中的奥秘和设计理念是什么，我们可以概况为：</p><blockquote><p>Iterator 接口提供了遍历集合类的规范。它把访问逻辑从不同类型的集合类中抽象出来，从而避免向客户端暴露集合的内部结构（数组、链表等结构）。<br>例如，如果没有使用 Iterator，遍历一个数组的方法是使用索引：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;array.size(); i++) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> get(i) ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而访问一个链表（LinkedList）又必须使用 while 循环：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ((e=e.next())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> e.data() ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上两种方法客户端都必须事先知道集合的内部结构，访问代码和集合本身是紧耦合，无法将访问逻辑从集合类和客户端代码中分离出来，每一种集合对应一种遍历方法，客户端代码无法复用。更恐怖的是，如果以后需要把 ArrayList 更换为 LinkedList ，则原来的客户端代码必须全部重写。</p><p>为解决以上问题，Iterator模式总是用同一种逻辑来遍历集合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Iterator it = c.iterater(); it.hasNext(); ) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>奥秘在于客户端自身不维护遍历集合的”指针”，所有的内部状态（如当前元素位置，是否有下一个元素）都由 Iterator 来维护，而这个 Iterator 由集合类通过工厂方法生成，因此，它知道如何遍历整个集合。客户端从不直接和集合类打交道，它总是控制 Iterator ，向它发送”向前”，”向后”，”取当前元素”的命令，就可以间接遍历整个集合。</p></blockquote><h2 id="fail-fast-机制"><a href="#fail-fast-机制" class="headerlink" title="fail-fast 机制"></a>fail-fast 机制</h2><p>通过阅读 ArrayList 迭代器源码，我们可以发现集合在迭代过程中，新增、修改或者删除集合元素时，程序有可能会抛出ConcurrentModificationException 异常，这个异常的设置，就是集合迭代 fail-fast 机制。大家可以在文章中搜索 ConcurrentModificationException 出现的地方，结合阅读源码来了解 fail-fast 机制实现逻辑。<br>fail-fast 机制具体可以概况为：</p><blockquote><p>fail-fast 机制是java集合(Collection)中的一种错误机制。当多个线程对同一个集合的内容进行操作时，就可能会产生fail-fast事件。</p></blockquote><h3 id="fail-fast-目的"><a href="#fail-fast-目的" class="headerlink" title="fail-fast 目的"></a>fail-fast 目的</h3><blockquote><p>迭代器的快速失败行为无法得到保证，因为一般来说，不可能对是否出现不同步并发修改做出任何硬性保证。快速失败迭代器会尽最大努力抛出 ConcurrentModificationException。因此，为提高这类迭代器的正确性而编写一个依赖于此异常的程序是错误的做法：迭代器的快速失败行为应该仅用于检测 bug。</p></blockquote><h3 id="fail-fast-原因"><a href="#fail-fast-原因" class="headerlink" title="fail-fast 原因"></a>fail-fast 原因</h3><p>ArrayList 集合维护了一个全局变量 modCount ， 初始值为 0， 它是集合 AbstractList 抽象类里的。当我们调用 ArrayList 的 add 、 remove 、 clear 方法， modCount 变量值会增加，可以发现 modCount 值是用来记录集合发生修改的次数。阅读 ArrayList 迭代器实现代码，我们发现程序中有 int expectedModCount = modCount 的逻辑，当我们要迭代集合时，创建的迭代器的 expectedModCount 与 modCount 值相同，而当 ArrayList 发生修改时，modCount 值发生变化，而迭代器并没有同步到modCount 值的变化，当程序调用迭代器 next 方法，会触发程序设置的 checkForComodification 方法，而此时 expectedModCount != modCount ,则抛出 ConcurrentModificationException 异常。当然，迭代的程序检查到数组越界异常，或者当 cursor 的值大于 ArrayList 的 elementData.length 的值，也会抛出 ConcurrentModificationException 异常。</p><h3 id="fail-fast-机制具体案例"><a href="#fail-fast-机制具体案例" class="headerlink" title="fail-fast 机制具体案例"></a>fail-fast 机制具体案例</h3><p>单线程的情况下，直接调用 ArrayList 的 remove 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">singleThreadArrayList</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt; integerList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">    integerList.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    Iterator&lt;Integer&gt; iterator = integerList.iterator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line"></span><br><span class="line">        Integer integer = iterator.next();</span><br><span class="line">        <span class="keyword">if</span>(integer == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">// 调用 ArrayList 的 remove 方法后，expectedModCount != modCount，抛异常</span></span><br><span class="line">            <span class="comment">// 调用 Iterator 的 remove 方法，则程序执行正常</span></span><br><span class="line">            integerList.remove(integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行后抛出异常：<br><img src="/images/post/2016/02/single_thread_iterator.jpg" alt="single_thread_iterator"></p><p>多线程环境中，调用 Iterator 的 remove 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;Integer&gt; integerList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multiThreadArrayList</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span>;i++)&#123;</span><br><span class="line">        integerList.add(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Thread oneThread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        Iterator&lt;Integer&gt; iterator = integerList.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> value = iterator.next();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"thread one iterator value:"</span> + value);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1L</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    Thread twoThread = <span class="keyword">new</span> Thread(() -&gt;&#123;</span><br><span class="line"></span><br><span class="line">        Iterator&lt;Integer&gt; iterator = integerList.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> value = iterator.next();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"thread two iterator value:"</span> + value);</span><br><span class="line">            <span class="keyword">if</span>( value == <span class="number">8</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"thread two remove value:"</span> + value);</span><br><span class="line">                iterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    oneThread.start();</span><br><span class="line">    twoThread.start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//等待线程 one 执行完成</span></span><br><span class="line">        oneThread.join();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行后抛出异常：<br><img src="/images/post/2016/02/mulit_thread_iterator.jpg" alt="mulit_thread_iterator"></p><p>多线程的情况下修改集合元素一定要谨慎，以免程序异常。</p><h1 id="子集操作及注意事项"><a href="#子集操作及注意事项" class="headerlink" title="子集操作及注意事项"></a>子集操作及注意事项</h1><p>有时我们可能只想取得 List 集合中的某段连续的集合元素，ArrayList 和 Vector 都提供了 subList 方法来截取集合的一部分来方便我们的使用。但是，这个功能带来方便的同时，也需要注意：</p><blockquote><p>subList 返回仅仅只是集合对象一个视图，操作 subList 后原集合对象也会被修改。</p></blockquote><p>SubList 类是 ArrayList 类里的一个内部类，subList 也提供了操作集合的 新增 add ，修改 set, 删除 remove, 获取 get 等方法，还实现了子集合迭代的功能。我们通过源码看看其内部实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 从当前 List 中创建一个指定起始位置和结束位置的 subList</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;E&gt; <span class="title">subList</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 边界检查</span></span><br><span class="line">    subListRangeCheck(fromIndex, toIndex, size);</span><br><span class="line">    <span class="comment">// this 指代当前对象，并传到 SubList 中</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SubList(<span class="keyword">this</span>, <span class="number">0</span>, fromIndex, toIndex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">subListRangeCheck</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fromIndex &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"fromIndex = "</span> + fromIndex);</span><br><span class="line">    <span class="keyword">if</span> (toIndex &gt; size)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"toIndex = "</span> + toIndex);</span><br><span class="line">    <span class="keyword">if</span> (fromIndex &gt; toIndex)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"fromIndex("</span> + fromIndex +</span><br><span class="line">                                           <span class="string">") &gt; toIndex("</span> + toIndex + <span class="string">")"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">SubList</span> <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">RandomAccess</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AbstractList&lt;E&gt; parent;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> parentOffset;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> offset;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    SubList(AbstractList&lt;E&gt; parent,</span><br><span class="line">            <span class="keyword">int</span> offset, <span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex) &#123;</span><br><span class="line">        <span class="keyword">this</span>.parent = parent;</span><br><span class="line">        <span class="keyword">this</span>.parentOffset = fromIndex;</span><br><span class="line">        <span class="keyword">this</span>.offset = offset + fromIndex;</span><br><span class="line">        <span class="keyword">this</span>.size = toIndex - fromIndex;</span><br><span class="line">        <span class="keyword">this</span>.modCount = ArrayList.<span class="keyword">this</span>.modCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改子集合中的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E e)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line">        checkForComodification();</span><br><span class="line">        <span class="comment">// 获取到 this 对象的 ArrayList 中的元素</span></span><br><span class="line">        E oldValue = ArrayList.<span class="keyword">this</span>.elementData(offset + index);</span><br><span class="line">        <span class="comment">// 同时 this 指代的 ArrayList 集合中的元素也被修改</span></span><br><span class="line">        ArrayList.<span class="keyword">this</span>.elementData[offset + index] = e;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取子集合中指定位置的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line">        <span class="comment">// 检查是否修改，fail-fast 机制</span></span><br><span class="line">        checkForComodification();</span><br><span class="line">        <span class="keyword">return</span> ArrayList.<span class="keyword">this</span>.elementData(offset + index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 子集合长度的大小</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在指定位置修改集合元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E e)</span> </span>&#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line">        checkForComodification();</span><br><span class="line">        parent.add(parentOffset + index, e);</span><br><span class="line">        <span class="keyword">this</span>.modCount = parent.modCount;</span><br><span class="line">        <span class="keyword">this</span>.size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除指定位置的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line">        checkForComodification();</span><br><span class="line">        E result = parent.remove(parentOffset + index);</span><br><span class="line">        <span class="keyword">this</span>.modCount = parent.modCount;</span><br><span class="line">        <span class="keyword">this</span>.size--;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按照范围删除元素</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">removeRange</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        parent.removeRange(parentOffset + fromIndex,</span><br><span class="line">                           parentOffset + toIndex);</span><br><span class="line">        <span class="keyword">this</span>.modCount = parent.modCount;</span><br><span class="line">        <span class="keyword">this</span>.size -= toIndex - fromIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 增加集合元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> addAll(<span class="keyword">this</span>.size, c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定位置出增加集合元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line">        <span class="keyword">int</span> cSize = c.size();</span><br><span class="line">        <span class="keyword">if</span> (cSize==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        checkForComodification();</span><br><span class="line">        parent.addAll(parentOffset + index, c);</span><br><span class="line">        <span class="keyword">this</span>.modCount = parent.modCount;</span><br><span class="line">        <span class="keyword">this</span>.size += cSize;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 迭代实现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> listIterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> offset = <span class="keyword">this</span>.offset;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListIterator&lt;E&gt;() &#123;</span><br><span class="line">            <span class="keyword">int</span> cursor = index;</span><br><span class="line">            <span class="keyword">int</span> lastRet = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> expectedModCount = ArrayList.<span class="keyword">this</span>.modCount;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> cursor != SubList.<span class="keyword">this</span>.size;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">            <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                checkForComodification();</span><br><span class="line">                <span class="keyword">int</span> i = cursor;</span><br><span class="line">                <span class="keyword">if</span> (i &gt;= SubList.<span class="keyword">this</span>.size)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">                Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">                <span class="keyword">if</span> (offset + i &gt;= elementData.length)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                cursor = i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> (E) elementData[offset + (lastRet = i)];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> cursor != <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">            <span class="function"><span class="keyword">public</span> E <span class="title">previous</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                checkForComodification();</span><br><span class="line">                <span class="keyword">int</span> i = cursor - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (i &lt; <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">                Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">                <span class="keyword">if</span> (offset + i &gt;= elementData.length)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                cursor = i;</span><br><span class="line">                <span class="keyword">return</span> (E) elementData[offset + (lastRet = i)];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; consumer)</span> </span>&#123;</span><br><span class="line">                Objects.requireNonNull(consumer);</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> size = SubList.<span class="keyword">this</span>.size;</span><br><span class="line">                <span class="keyword">int</span> i = cursor;</span><br><span class="line">                <span class="keyword">if</span> (i &gt;= size) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">final</span> Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">                <span class="keyword">if</span> (offset + i &gt;= elementData.length) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (i != size &amp;&amp; modCount == expectedModCount) &#123;</span><br><span class="line">                    consumer.accept((E) elementData[offset + (i++)]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// update once at end of iteration to reduce heap write traffic</span></span><br><span class="line">                lastRet = cursor = i;</span><br><span class="line">                checkForComodification();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> cursor;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">previousIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> cursor - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">                checkForComodification();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    SubList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">                    cursor = lastRet;</span><br><span class="line">                    lastRet = -<span class="number">1</span>;</span><br><span class="line">                    expectedModCount = ArrayList.<span class="keyword">this</span>.modCount;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">                checkForComodification();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ArrayList.<span class="keyword">this</span>.set(offset + lastRet, e);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">                checkForComodification();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">int</span> i = cursor;</span><br><span class="line">                    SubList.<span class="keyword">this</span>.add(i, e);</span><br><span class="line">                    cursor = i + <span class="number">1</span>;</span><br><span class="line">                    lastRet = -<span class="number">1</span>;</span><br><span class="line">                    expectedModCount = ArrayList.<span class="keyword">this</span>.modCount;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (expectedModCount != ArrayList.<span class="keyword">this</span>.modCount)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;E&gt; <span class="title">subList</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</span><br><span class="line">        subListRangeCheck(fromIndex, toIndex, size);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SubList(<span class="keyword">this</span>, offset, fromIndex, toIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>ArrayList 和 Vector 是一个可扩展，有序 ，可以迭代的集合类实现</li><li>创建集合的时候，如果预先知道集合的大小，可以创建具体大小的集合，这样可以避免集合不断扩展而造成的性能影响</li><li>fail-fast 机制是为了预防并发修改集合元素，而造成的迭代集合元素不一致的问题。自行编程不能依赖于这种机制，只能用于检测 bug</li><li>subList 返回仅仅只是集合对象一个视图，操作 subList 后原集合对象也会被修改</li></ul><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><blockquote><p><a href="https://stackoverflow.com/questions/322715/when-to-use-linkedlist-over-arraylist" target="_blank" rel="noopener">When to use LinkedList over ArrayList?</a><br><a href="http://cmsblogs.com/?p=1220" target="_blank" rel="noopener">Java提高篇（三四）—–fail-fast机制</a><br><a href="http://www.hollischuang.com/archives/33" target="_blank" rel="noopener">Java中的fail-fast机制</a><br><a href="http://cmsblogs.com/?p=1239" target="_blank" rel="noopener">subList的缺陷</a><br><a href="https://stackoverflow.com/questions/379551/java-split-a-list-into-two-sub-lists" target="_blank" rel="noopener">Java: split a List into two sub-Lists?</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过阅读 ArrayList 与 Verctor 的源码我们发现，它们的代码实现近似度几乎在90%。所以我把它们两个合并起来进行说明，细心的读者可以自行去IDE中阅读，比对他们的实现结构。本文主要结合 JDK8 源码介绍了 ArrayList 和 Vector 的创建、增、删、改以及集合的迭代和 fail-fast 机制，并说明了在操作子集的一些注意事项及原因。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;无特别说明，JDK 源码讲解都是基于 JDK8 进行的分析。&lt;br&gt;
    
    </summary>
    
      <category term="Technology" scheme="https://blog.51itzone.cn/categories/Technology/"/>
    
      <category term="Java" scheme="https://blog.51itzone.cn/categories/Technology/Java/"/>
    
    
      <category term="Java" scheme="https://blog.51itzone.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 下安装 Oracle JDK 的两种方法</title>
    <link href="https://blog.51itzone.cn/2016/02/13/ubuntu-install-java-two-method/"/>
    <id>https://blog.51itzone.cn/2016/02/13/ubuntu-install-java-two-method/</id>
    <published>2016-02-13T12:50:25.000Z</published>
    <updated>2018-08-20T02:11:16.649Z</updated>
    
    <content type="html"><![CDATA[<p>总结 ubuntu 系统下安装 Oracle JDK 的方法，方便大家，以及备以后使用。<br><a id="more"></a></p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><ol><li>添加<a href="http://baike.baidu.com/item/Ubuntu%20PPA" target="_blank" rel="noopener">ppa(源)</a>，并下载安装 jdk</li><li>通过<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">oracle官网</a>下载压缩包安装</li></ol><h1 id="一、通过-ppa-安装-jdk"><a href="#一、通过-ppa-安装-jdk" class="headerlink" title="一、通过 ppa 安装 jdk"></a>一、通过 ppa 安装 jdk</h1><h2 id="1-打开终端，执行以下命令："><a href="#1-打开终端，执行以下命令：" class="headerlink" title="1. 打开终端，执行以下命令："></a>1. 打开终端，执行以下命令：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install software-properties-common</span><br><span class="line">sudo add-apt-repository ppa:webupd8team/java</span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><h2 id="2-执行安装-jdk-的命令："><a href="#2-执行安装-jdk-的命令：" class="headerlink" title="2. 执行安装 jdk 的命令："></a>2. 执行安装 jdk 的命令：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install oracle-java8-installer</span><br></pre></td></tr></table></figure><p>安装过程，安装器会提示你同意 oracle 的服务条款,选择 ok 然后选择 yes 即可。<br>当然，可以通过命令，默认执行同意选择</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo oracle-java8-installer shared/accepted-oracle-license-v1-1selecttrue | sudo /usr/bin/debconf-set-selections</span><br></pre></td></tr></table></figure><p>如果在过程中，网速较慢或者安装中断，我们可以去官网下载 jdk 的压缩包，放到<code>/var/cache/oracle-jdk8-installer</code>目录下，然后在执行安装命令，安装器则会默认使用我们下载的 jdk 版本进行安装。</p><h2 id="3-设置默认-jdk"><a href="#3-设置默认-jdk" class="headerlink" title="3. 设置默认 jdk"></a>3. 设置默认 jdk</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jdk7</span><br><span class="line">sudo update-java-alternatives -s java-7-oracle</span><br><span class="line"></span><br><span class="line">jdk8</span><br><span class="line">sudo update-java-alternatives -s java-8-oracle</span><br></pre></td></tr></table></figure><h2 id="4-测试安装"><a href="#4-测试安装" class="headerlink" title="4. 测试安装"></a>4. 测试安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br><span class="line"></span><br><span class="line">javac -version</span><br></pre></td></tr></table></figure><h1 id="二、通过官网下-jdk-压缩包安装"><a href="#二、通过官网下-jdk-压缩包安装" class="headerlink" title="二、通过官网下 jdk 压缩包安装"></a>二、通过官网下 jdk 压缩包安装</h1><h2 id="1-官网下载-jdk-压缩包shell"><a href="#1-官网下载-jdk-压缩包shell" class="headerlink" title="1. 官网下载 jdk 压缩包shell"></a>1. 官网下载 jdk 压缩包shell</h2><p>下载地址：<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a>，选择相应版本的 jdk ，并下载压缩包。</p><h2 id="2-创建目录并解压缩-jdk"><a href="#2-创建目录并解压缩-jdk" class="headerlink" title="2. 创建目录并解压缩 jdk"></a>2. 创建目录并解压缩 jdk</h2><p>创建目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /usr/lib/jvm</span><br></pre></td></tr></table></figure><p>解压缩到创建的目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zxvf jdk-8u66-linux-x64.tar.gz -C /usr/lib/jvm</span><br></pre></td></tr></table></figure><h2 id="3-增加-jdk-环境变量"><a href="#3-增加-jdk-环境变量" class="headerlink" title="3. 增加 jdk 环境变量"></a>3. 增加 jdk 环境变量</h2><p>修改linux环境变量文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>set oracle jdk environment</span><br><span class="line">export JAVA_HOME="/usr/lib/jvm/jdk1.8.0_66"</span><br><span class="line">export PATH="$PATH:$JAVA_HOME/bin"</span><br><span class="line">export JRE_HOME="$JAVA_HOME/jre"</span><br><span class="line">export CLASSPATH=".:$JAVA_HOME/lib:$JRE_HOME/lib"</span><br></pre></td></tr></table></figure><h2 id="4-使环境变量立即生效"><a href="#4-使环境变量立即生效" class="headerlink" title="4.使环境变量立即生效"></a>4.使环境变量立即生效</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h2 id="5-设置系统默认-jdk"><a href="#5-设置系统默认-jdk" class="headerlink" title="5. 设置系统默认 jdk"></a>5. 设置系统默认 jdk</h2><p>因为许多 linux 默认安装有 openjdk ，所以需要执行以下命令，设置默认 jdk</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk1.8.0_66/bin/java 300 </span><br><span class="line">sudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/jdk1.8.0_66/bin/javac 300 </span><br><span class="line">sudo update-alternatives --install /usr/bin/jar jar /usr/lib/jvm/jdk1.8.0_66/bin/jar 300 </span><br><span class="line">sudo update-alternatives --install /usr/bin/javah javah /usr/lib/jvm/jdk1.8.0_66/bin/javah 300 </span><br><span class="line">sudo update-alternatives --install /usr/bin/javap javap /usr/lib/jvm/jdk1.8.0_66/bin/javap 300</span><br></pre></td></tr></table></figure><p>这里的300只是标识一下，没什么意义，只是下一步要用到<br>然后执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --config java</span><br></pre></td></tr></table></figure><p>若是初次安装 jdk, 会有下面的提示<br><code>There is only one alternative in link group java (providing /usr/bin/java)</code><br>否者 , 会列出系统上的所有已安装的 java，然后自己选择，即选最后为300的那个</p><h2 id="6-测试-jdk-是否安装成功"><a href="#6-测试-jdk-是否安装成功" class="headerlink" title="6. 测试 jdk 是否安装成功"></a>6. 测试 jdk 是否安装成功</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br><span class="line"></span><br><span class="line">javac -version</span><br></pre></td></tr></table></figure><h1 id="另外"><a href="#另外" class="headerlink" title="另外"></a>另外</h1><p>删除通过 ppa 安装的 jdk </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove oracle-java8-installer</span><br></pre></td></tr></table></figure><p>好，以上就安装 jdk 的两种方法，希望对大家有所帮助</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结 ubuntu 系统下安装 Oracle JDK 的方法，方便大家，以及备以后使用。&lt;br&gt;
    
    </summary>
    
      <category term="Technology" scheme="https://blog.51itzone.cn/categories/Technology/"/>
    
      <category term="Java" scheme="https://blog.51itzone.cn/categories/Technology/Java/"/>
    
    
      <category term="Java" scheme="https://blog.51itzone.cn/tags/Java/"/>
    
      <category term="Ubuntu" scheme="https://blog.51itzone.cn/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>记录成为更好的自己</title>
    <link href="https://blog.51itzone.cn/2016/02/10/record-to-be-better/"/>
    <id>https://blog.51itzone.cn/2016/02/10/record-to-be-better/</id>
    <published>2016-02-10T12:46:25.000Z</published>
    <updated>2018-08-20T02:11:16.649Z</updated>
    
    <content type="html"><![CDATA[<p>万事开头难，不管做什么最难的就是从零到一的过程。一直以来都想搭建自己的博客来记录自己的所思、所想、所感。写博客在于坚持，坚持下来记录自己的生活和想法，留下一些记忆。<br><a id="more"></a></p><ul><li>写博客的好处</li><li>如何才能坚持写博客</li></ul><h2 id="一-写博客的好处"><a href="#一-写博客的好处" class="headerlink" title="一.写博客的好处"></a>一.写博客的好处</h2><h3 id="1、学习写blog的技巧"><a href="#1、学习写blog的技巧" class="headerlink" title="1、学习写blog的技巧"></a>1、学习写blog的技巧</h3><p>没有人天生会写blog，不断尝试，思考所写的内容，才会练就写出大家喜欢的博文。</p><h3 id="2、编写读书笔记"><a href="#2、编写读书笔记" class="headerlink" title="2、编写读书笔记"></a>2、编写读书笔记</h3><p>书读了很多，发现自己没有收获，用读书笔记来总结心得是个很不错的做法。</p><h3 id="3、制定学习计划"><a href="#3、制定学习计划" class="headerlink" title="3、制定学习计划"></a>3、制定学习计划</h3><ul><li>学习过的知识需要总结，经常复习回顾，不然时间久了就会遗忘。把所学习的知识分享出来，与大家交流学习，同时自己也要定期回顾总结，温故知新么。</li></ul><h3 id="4、可以成就和了解自我"><a href="#4、可以成就和了解自我" class="headerlink" title="4、可以成就和了解自我"></a>4、可以成就和了解自我</h3><p>文章写的多了，就会发现自己什么地方可以想清楚，什么地方需要改进和完善，写着写着就会对自己认识的更清晰，你最终会明白自己是一个什么样的人，和自己所感兴趣的是什么。</p><h2 id="二、如何才能坚持写博客"><a href="#二、如何才能坚持写博客" class="headerlink" title="二、如何才能坚持写博客"></a>二、如何才能坚持写博客</h2><h3 id="1、坚持，是一种优秀习惯"><a href="#1、坚持，是一种优秀习惯" class="headerlink" title="1、坚持，是一种优秀习惯"></a>1、坚持，是一种优秀习惯</h3><p>坚持写博客需要做的以下四点：实践、反思、总结、坚持。不断的去在实践中总结反思、优化、坚持，才能真正学习到精髓。</p><h3 id="2、时时刻刻的都要准备好开始写作"><a href="#2、时时刻刻的都要准备好开始写作" class="headerlink" title="2、时时刻刻的都要准备好开始写作"></a>2、时时刻刻的都要准备好开始写作</h3><p>善于利用身边的工具，比如Evernote、有道云笔记。当我们有写作的想法，但是时间不允许，我们可以在工具里先拟好要写的提纲和思考后总结出的内容。</p><h3 id="3、收集写作内容，并转化为自己的文章"><a href="#3、收集写作内容，并转化为自己的文章" class="headerlink" title="3、收集写作内容，并转化为自己的文章"></a>3、收集写作内容，并转化为自己的文章</h3><p>推荐大家使用[稍后阅读]功能，比如知名的<a href="https://getpocket.com/" target="_blank" rel="noopener">Pocket</a>,支持多终端同步。然后我们可以把自己想写的内容收集起来，等有空了进行消化、总结和写作。</p><h3 id="4、坚持写作，完成自我的营销"><a href="#4、坚持写作，完成自我的营销" class="headerlink" title="4、坚持写作，完成自我的营销"></a>4、坚持写作，完成自我的营销</h3><p>现在是自媒体的天下，在这发达的互联网浪潮里，我们需要学会营销自己，展示自己才华，为自己创造价值也为他人创建价值，实现共赢。</p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>写博客在于坚持，三分热度成就不了自己，也不能给别人带来帮助和价值。制定出明确的计划，把自己的所学转换成知识传递出去。记录，成为更好的自己。</p><blockquote><p>刘未鹏说——<br>写博客这件事情给我最大的体会就是，一件事情如果你能够坚持做8年，那么不管效率和频率多低，最终总能取得一些很可观的收益。而另一个体会就是，一件事情只要你坚持得足够久，“坚持”就会慢慢变成“习惯”。原本需要费力去驱动的事情便成了家常便饭，云淡风轻。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;万事开头难，不管做什么最难的就是从零到一的过程。一直以来都想搭建自己的博客来记录自己的所思、所想、所感。写博客在于坚持，坚持下来记录自己的生活和想法，留下一些记忆。&lt;br&gt;
    
    </summary>
    
      <category term="LifeStyle" scheme="https://blog.51itzone.cn/categories/LifeStyle/"/>
    
    
      <category term="LifeStyle" scheme="https://blog.51itzone.cn/tags/LifeStyle/"/>
    
  </entry>
  
</feed>
